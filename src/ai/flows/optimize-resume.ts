// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A resume optimization AI agent.
 *
 * - optimizeResume - A function that handles the resume optimization process.
 * - OptimizeResumeInput - The input type for the optimizeResume function.
 * - OptimizeResumeOutput - The return type for the optimizeResume function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizeResumeInputSchema = z.object({
  resumeDataUri: z
    .string()
    .describe(
      "A resume file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  jobDescription: z.string().describe('The job description to optimize the resume for.'),
});
export type OptimizeResumeInput = z.infer<typeof OptimizeResumeInputSchema>;

const OptimizeResumeOutputSchema = z.object({
  extractedKeywords: z.array(z.string()).describe('A list of important keywords extracted from the job description.'),
  optimizedResume: z.string().describe('The optimized resume in Markdown format.'),
});
export type OptimizeResumeOutput = z.infer<typeof OptimizeResumeOutputSchema>;

export async function optimizeResume(input: OptimizeResumeInput): Promise<OptimizeResumeOutput> {
  return optimizeResumeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'optimizeResumePrompt',
  input: {schema: OptimizeResumeInputSchema},
  output: {schema: OptimizeResumeOutputSchema},
  prompt: `You are an expert career coach and professional resume writer. Your task is to meticulously optimize the user's provided resume to align perfectly with the given job description. Your goal is to significantly increase the chances of the resume passing through Applicant Tracking Systems (ATS) and impressing human recruiters.

**Resume Analysis and Optimization Steps:**

1.  **Deconstruct the Job Description:**
    *   Thoroughly analyze the job description to identify core responsibilities, required qualifications, and preferred skills (both hard and soft skills).
    *   Extract a list of the most important and relevant keywords and phrases. These should be specific skills, technologies, or qualifications mentioned.
    *   Populate the \`extractedKeywords\` field in the output with this list.

2.  **Parse and Understand the Resume:**
    *   Analyze the content of the resume provided via the data URI.
    *   Identify the user's experience, skills, education, and projects.

3.  **Optimize for ATS and Keywords:**
    *   Strategically integrate the extracted keywords from the job description into the resume.
    *   Rephrase bullet points in the 'Experience' section to reflect the language and priorities of the job description. Use action verbs.
    *   Ensure the 'Skills' section includes relevant technologies and abilities mentioned in the job post.

4.  **Enhance for Human Readability:**
    *   Improve the clarity, impact, and professional tone of the resume.
    *   Quantify achievements wherever possible (e.g., "Increased efficiency by 20%" or "Managed a team of 5").
    *   Ensure consistent formatting. The output must be valid Markdown.

5.  **Maintain Brevity and Relevance:**
    *   The total length of the resume should not be significantly increased.
    *   Prioritize the most relevant information. Remove or condense experiences or skills that are not pertinent to the target role.

**Input:**

*   **User's Resume:** {{media url=resumeDataUri}}
*   **Target Job Description:** {{{jobDescription}}}

**Output:**

First, identify and extract keywords into the \`extractedKeywords\` array. Then, produce the \`optimizedResume\` as a complete, well-formatted Markdown string. Do not include any introductory text or explanations outside of the resume content itself.`,
});

const optimizeResumeFlow = ai.defineFlow(
  {
    name: 'optimizeResumeFlow',
    inputSchema: OptimizeResumeInputSchema,
    outputSchema: OptimizeResumeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
